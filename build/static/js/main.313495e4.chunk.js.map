{"version":3,"sources":["registerServiceWorker.js","components/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","App","visRef","useRef","useEffect","Neovis","container_id","server_url","server_user","server_password","labels","Troll","caption","size","community","relationships","RETWEETS","thickness","initial_cypher","render","id","ref","style","width","height","backgroundColor","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8KAUMA,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAsCR,SAASC,EAAgBC,GACrBC,UAAUC,cACLC,SAASH,GACTI,MAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,WAKxBC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAM/BC,OAAM,SAAAC,GACHH,QAAQG,MAAM,4CAA6CA,M,oBCZxDC,EA1DH,WAIR,IAAMC,EAASC,mBA0Bf,OAzBAC,qBAAU,WAqBM,IAAIC,IApBD,CACXC,aAAc,MACdC,WAAY,sBACZC,YAAa,QACbC,gBAAiB,WACjBC,OAAQ,CACJC,MAAO,CACHC,QAAS,WACTC,KAAM,WACNC,UAAW,cAGnBC,cAAe,CACXC,SAAU,CACNJ,SAAS,EACTK,UAAW,UAGnBC,eAAgB,gCAGhBC,WACL,IAGC,yBACIC,GAAG,MACHC,IAAKnB,EACLoB,MAAO,CACHC,MAAO,IACPC,OAAQ,IACRC,gBAAiB,uB,KCxCjCC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SFclC,WACX,GAA6C,kBAAmB1C,UAAW,CAGvE,GADkB,IAAI2C,IAAIC,IAAwBlD,OAAOC,UAC3CkD,SAAWnD,OAAOC,SAASkD,OAIrC,OAGJnD,OAAOoD,iBAAiB,QAAQ,WAC5B,IAAM/C,EAAK,qBAEPP,IAiDhB,SAAiCO,GAE7BgD,MAAMhD,GACDI,MAAK,SAAA6C,GAGsB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CpD,UAAUC,cAAcoD,MAAMlD,MAAK,SAAAC,GAC/BA,EAAakD,aAAanD,MAAK,WAC3BT,OAAOC,SAAS4D,eAKxBzD,EAAgBC,MAGvBc,OAAM,WACHF,QAAQC,IACJ,oEArEA4C,CAAwBzD,GAIxBC,UAAUC,cAAcoD,MAAMlD,MAAK,WAC/BQ,QAAQC,IACJ,gHAMRd,EAAgBC,OEzChC0D,I","file":"static/js/main.313495e4.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log(\"New content is available; please refresh.\");\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React, { useRef, useEffect } from \"react\";\nimport Neovis from \"neovis.js/dist/neovis.js\";\n\n// const NEO4J_URI = \"bolt://124.222.4.79:7474\";\n// const NEO4J_URI = \"bolt://100.27.36.92:7687\";\n// const NEO4J_USER = \"neo4j\";\n// // const NEO4J_PASSWORD = \"password\";\n// const NEO4J_PASSWORD = \"beacons-ramps-subordinates\";\n\nconst App = () => {\n    // const data = window.location.href.split('=')[1].toString()\n    //MATCH (a:Airport)RETURNaLIMIT4\n    // console.log(data.slice(0, 5) + \" \" + data.slice(5,16)+' '+data.slice(16,22)+\" \"+data.slice(22,23)+\" \"+data.slice(23,28)+\" \"+data.slice(27));\n    const visRef = useRef();\n    useEffect(() => {\n        const config = {\n            container_id: 'id1',\n            server_url: \"bolt://124.222.4.79\",\n            server_user: \"neo4j\",\n            server_password: \"password\",\n            labels: {\n                Troll: {\n                    caption: \"user_key\",\n                    size: \"pagerank\",\n                    community: \"community\",\n                },\n            },\n            relationships: {\n                RETWEETS: {\n                    caption: false,\n                    thickness: \"count\",\n                },\n            },\n            initial_cypher: \"MATCH (n) RETURN n LIMIT 25\"\n        };\n        const vis = new Neovis(config);\n        vis.render();\n    }, []);\n\n    return (\n        <div\n            id='id1'\n            ref={visRef}\n            style={{\n                width: 400,\n                height: 800,\n                backgroundColor: \"rgb(215 247 229)\",\n            }}\n        />\n    );\n};\n\n//   return (\n//     <div className=\"App\" style={{ fontFamily: \"Quicksand\" }}>\n//       <NeoGraph\n//         width={400}\n//         height={800}\n//         containerId={\"id1\"}\n//         neo4jUri={NEO4J_URI}\n//         neo4jUser={NEO4J_USER}\n//         neo4jPassword={NEO4J_PASSWORD}\n//         backgroundColor={\"#b2beb5\"}\n//       />\n//     </div>\n//   );\n// };\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport App from \"./components/App\";\nimport \"./typography.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}